-- MySQL Script generated by MySQL Workbench
-- Wed May 29 22:47:25 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema tourism_db
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema tourism_db
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `tourism_db` DEFAULT CHARACTER SET utf8 ;
USE `tourism_db` ;

-- -----------------------------------------------------
-- Table `tourism_db`.`Country`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`Country` (
  `ISO3166-1` VARCHAR(2) NOT NULL,
  `FullName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ISO3166-1`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tourism_db`.`Region`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`Region` (
  `idRegion` INT NOT NULL AUTO_INCREMENT,
  `FullName` VARCHAR(45) NOT NULL,
  `Country_ISO3166-1` VARCHAR(2) NOT NULL,
  PRIMARY KEY (`idRegion`),
  INDEX `fk_Region_Country_idx` (`Country_ISO3166-1` ASC) VISIBLE,
  CONSTRAINT `fk_Region_Country`
    FOREIGN KEY (`Country_ISO3166-1`)
    REFERENCES `tourism_db`.`Country` (`ISO3166-1`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tourism_db`.`City`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`City` (
  `idCity` INT NOT NULL AUTO_INCREMENT,
  `FullName` VARCHAR(45) NOT NULL,
  `Region_idRegion` INT NOT NULL,
  PRIMARY KEY (`idCity`),
  INDEX `fk_City_Region1_idx` (`Region_idRegion` ASC) VISIBLE,
  CONSTRAINT `fk_City_Region1`
    FOREIGN KEY (`Region_idRegion`)
    REFERENCES `tourism_db`.`Region` (`idRegion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tourism_db`.`Peculiarity`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`Peculiarity` (
  `idPeculiarity` INT NOT NULL AUTO_INCREMENT,
  `Description` TEXT NOT NULL,
  PRIMARY KEY (`idPeculiarity`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tourism_db`.`Transport`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`Transport` (
  `idTransport` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Capacity` INT NOT NULL,
  PRIMARY KEY (`idTransport`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tourism_db`.`Route`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`Route` (
  `idRoute` INT NOT NULL AUTO_INCREMENT,
  `From_idCity` INT NOT NULL,
  `To_idCity` INT NOT NULL,
  `Departure` DATETIME NOT NULL,
  `Arrival` DATETIME NOT NULL,
  `Price` DECIMAL(10,2) NOT NULL,
  `Transport_idTransport` INT NOT NULL,
  PRIMARY KEY (`idRoute`),
  INDEX `fk_Route_City1_idx` (`From_idCity` ASC) VISIBLE,
  INDEX `fk_Route_City2_idx` (`To_idCity` ASC) VISIBLE,
  INDEX `fk_Route_Transport1_idx` (`Transport_idTransport` ASC) VISIBLE,
  CONSTRAINT `fk_Route_City1`
    FOREIGN KEY (`From_idCity`)
    REFERENCES `tourism_db`.`City` (`idCity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Route_City2`
    FOREIGN KEY (`To_idCity`)
    REFERENCES `tourism_db`.`City` (`idCity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Route_Transport1`
    FOREIGN KEY (`Transport_idTransport`)
    REFERENCES `tourism_db`.`Transport` (`idTransport`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tourism_db`.`UserRole`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`UserRole` (
  `idUserRole` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idUserRole`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tourism_db`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`User` (
  `idUser` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  `Surname` VARCHAR(45) NOT NULL,
  `Patronymic` VARCHAR(45) NULL,
  `Birth` DATE NOT NULL,
  `UserRole_idUserRole` INT NOT NULL,
  `Login` VARCHAR(45) NULL,
  `PasswordSHA256` VARCHAR(64) NULL,
  PRIMARY KEY (`idUser`),
  INDEX `fk_User_UserRole1_idx` (`UserRole_idUserRole` ASC) VISIBLE,
  CONSTRAINT `fk_User_UserRole1`
    FOREIGN KEY (`UserRole_idUserRole`)
    REFERENCES `tourism_db`.`UserRole` (`idUserRole`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tourism_db`.`Entry`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`Entry` (
  `idEntry` INT NOT NULL AUTO_INCREMENT,
  `User_idUser` INT NOT NULL,
  `Route_idRoute` INT NOT NULL,
  `Rating` FLOAT NULL,
  PRIMARY KEY (`idEntry`),
  INDEX `fk_Entry_User1_idx` (`User_idUser` ASC) VISIBLE,
  INDEX `fk_Entry_Route1_idx` (`Route_idRoute` ASC) VISIBLE,
  CONSTRAINT `fk_Entry_User1`
    FOREIGN KEY (`User_idUser`)
    REFERENCES `tourism_db`.`User` (`idUser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Entry_Route1`
    FOREIGN KEY (`Route_idRoute`)
    REFERENCES `tourism_db`.`Route` (`idRoute`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tourism_db`.`Pecularities_Countries`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`Pecularities_Countries` (
  `Country_ISO3166-1` VARCHAR(2) NOT NULL,
  `Peculiarity_idPeculiarity` INT NOT NULL,
  `idCountryPecularity` INT NOT NULL AUTO_INCREMENT,
  INDEX `fk_Pecularities_Countries_Country1_idx` (`Country_ISO3166-1` ASC) VISIBLE,
  INDEX `fk_Pecularities_Countries_Peculiarity1_idx` (`Peculiarity_idPeculiarity` ASC) VISIBLE,
  PRIMARY KEY (`idCountryPecularity`),
  CONSTRAINT `fk_Pecularities_Countries_Country1`
    FOREIGN KEY (`Country_ISO3166-1`)
    REFERENCES `tourism_db`.`Country` (`ISO3166-1`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pecularities_Countries_Peculiarity1`
    FOREIGN KEY (`Peculiarity_idPeculiarity`)
    REFERENCES `tourism_db`.`Peculiarity` (`idPeculiarity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tourism_db`.`Pecularities_Regions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`Pecularities_Regions` (
  `Region_idRegion` INT NOT NULL,
  `Peculiarity_idPeculiarity` INT NOT NULL,
  `idRegionPecularity` INT NOT NULL AUTO_INCREMENT,
  INDEX `fk_Pecularities_Regions_Region1_idx` (`Region_idRegion` ASC) VISIBLE,
  INDEX `fk_Pecularities_Regions_Peculiarity1_idx` (`Peculiarity_idPeculiarity` ASC) VISIBLE,
  PRIMARY KEY (`idRegionPecularity`),
  CONSTRAINT `fk_Pecularities_Regions_Region1`
    FOREIGN KEY (`Region_idRegion`)
    REFERENCES `tourism_db`.`Region` (`idRegion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pecularities_Regions_Peculiarity1`
    FOREIGN KEY (`Peculiarity_idPeculiarity`)
    REFERENCES `tourism_db`.`Peculiarity` (`idPeculiarity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tourism_db`.`Pecularities_Cities`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`Pecularities_Cities` (
  `City_idCity` INT NOT NULL,
  `Peculiarity_idPeculiarity` INT NOT NULL,
  `idCityPecularity` INT NOT NULL AUTO_INCREMENT,
  INDEX `fk_Pecularities_Cities_City1_idx` (`City_idCity` ASC) VISIBLE,
  INDEX `fk_Pecularities_Cities_Peculiarity1_idx` (`Peculiarity_idPeculiarity` ASC) VISIBLE,
  PRIMARY KEY (`idCityPecularity`),
  CONSTRAINT `fk_Pecularities_Cities_City1`
    FOREIGN KEY (`City_idCity`)
    REFERENCES `tourism_db`.`City` (`idCity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Pecularities_Cities_Peculiarity1`
    FOREIGN KEY (`Peculiarity_idPeculiarity`)
    REFERENCES `tourism_db`.`Peculiarity` (`idPeculiarity`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `tourism_db` ;

-- -----------------------------------------------------
-- Placeholder table for view `tourism_db`.`CityCountryView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`CityCountryView` (`idCity` INT, `FullName` INT, `Country_ISO3166-1` INT, `'RegionName'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `tourism_db`.`RouteCitiesView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`RouteCitiesView` (`idRoute` INT, `'FromCityId'` INT, `'FromCityName'` INT, `'ToCityId'` INT, `'ToCityName'` INT, `Departure` INT, `Arrival` INT, `Price` INT, `'TransportId'` INT, `'TransportName'` INT, `'TransportCapacity'` INT, `ToCityPopularity` INT);

-- -----------------------------------------------------
-- Placeholder table for view `tourism_db`.`DestinationPopularityView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`DestinationPopularityView` (`"To_idCity"` INT, `"ToCityPopularity"` INT);

-- -----------------------------------------------------
-- Placeholder table for view `tourism_db`.`RegionPopularityView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`RegionPopularityView` (`idRegion` INT, `"ToRegionPopularity"` INT);

-- -----------------------------------------------------
-- Placeholder table for view `tourism_db`.`CountryPopularityView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`CountryPopularityView` (`ISO3166-1` INT, `"ToCountryPopularity"` INT);

-- -----------------------------------------------------
-- Placeholder table for view `tourism_db`.`UserPreferenceView`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tourism_db`.`UserPreferenceView` (`idPeculiarity` INT, `idUser` INT, `"TotalPreference"` INT);

-- -----------------------------------------------------
-- View `tourism_db`.`CityCountryView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `tourism_db`.`CityCountryView`;
USE `tourism_db`;
CREATE  OR REPLACE VIEW `CityCountryView` AS
SELECT idCity, City.FullName, Region.`Country_ISO3166-1`, Region.Fullname AS 'RegionName' From City
INNER JOIN Region ON Region_idRegion = Region.idRegion;

-- -----------------------------------------------------
-- View `tourism_db`.`RouteCitiesView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `tourism_db`.`RouteCitiesView`;
USE `tourism_db`;
CREATE  OR REPLACE VIEW `RouteCitiesView` AS
SELECT idRoute, 
FromCity.idCity AS 'FromCityId', FromCity.Fullname AS 'FromCityName', 
ToCity.idCity AS 'ToCityId', ToCity.FullName AS 'ToCityName', 
Departure, Arrival, Price, 
Transport.idTransport AS 'TransportId', 
Transport.Name AS 'TransportName', 
Transport.Capacity AS 'TransportCapacity',
DestinationPopularityView.ToCityPopularity
FROM Route
INNER JOIN City AS FromCity ON From_idCity = FromCity.idCity
INNER JOIN City AS ToCity ON To_idCity = ToCity.idCity
INNER JOIN Transport ON Transport_idTransport = Transport.idTransport
INNER JOIN DestinationPopularityView ON DestinationPopularityView.To_idCity = ToCity.idCity
ORDER BY ToCityPopularity;

-- -----------------------------------------------------
-- View `tourism_db`.`DestinationPopularityView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `tourism_db`.`DestinationPopularityView`;
USE `tourism_db`;
CREATE  OR REPLACE VIEW DestinationPopularityView AS
SELECT City.idCity AS "To_idCity", 0 AS "ToCityPopularity" FROM City
WHERE NOT EXISTS (SELECT Route.To_idCity FROM Entry
INNER JOIN Route ON Route.idRoute = Route_idRoute
WHERE Route.To_idCity = City.idCity)
UNION ALL
SELECT Route.To_idCity, COUNT(*) AS "ToCityPopularity" FROM Entry
INNER JOIN Route ON Route.idRoute = Route_idRoute
GROUP BY To_idCity
ORDER BY ToCityPopularity;

-- -----------------------------------------------------
-- View `tourism_db`.`RegionPopularityView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `tourism_db`.`RegionPopularityView`;
USE `tourism_db`;
CREATE  OR REPLACE VIEW RegionPopularityView AS
SELECT Region.idRegion, COUNT(*) AS "ToRegionPopularity" FROM Entry
INNER JOIN Route ON Route.idRoute = Route_idRoute
INNER JOIN City ON City.idCity = To_idCity
INNER JOIN Region ON Region.idRegion = City.Region_idRegion
GROUP BY idRegion
ORDER BY ToRegionPopularity;

-- -----------------------------------------------------
-- View `tourism_db`.`CountryPopularityView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `tourism_db`.`CountryPopularityView`;
USE `tourism_db`;
CREATE  OR REPLACE VIEW CountryPopularityView AS
SELECT Country.`ISO3166-1`, COUNT(*) AS "ToCountryPopularity" FROM Entry
INNER JOIN Route ON Route.idRoute = Route_idRoute
INNER JOIN City ON City.idCity = To_idCity
INNER JOIN Region ON Region.idRegion = City.Region_idRegion
INNER JOIN Country ON Country.`ISO3166-1` = Region.`Country_ISO3166-1`
GROUP BY `ISO3166-1`
ORDER BY ToCountryPopularity;

-- -----------------------------------------------------
-- View `tourism_db`.`UserPreferenceView`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `tourism_db`.`UserPreferenceView`;
USE `tourism_db`;
CREATE  OR REPLACE VIEW UserPreferenceView AS
SELECT idPeculiarity, 
User.idUser,
SUM(Entry.Rating) AS "TotalPreference"
FROM peculiarity
INNER JOIN Pecularities_Cities ON Pecularities_Cities.Peculiarity_idPeculiarity = idPeculiarity
INNER JOIN City ON Pecularities_Cities.City_idCity = City.idCity
INNER JOIN Region ON City.Region_idRegion = Region.idRegion
INNER JOIN Pecularities_Regions ON Pecularities_Regions.Region_idRegion = Region.idRegion
INNER JOIN Country ON Region.`Country_ISO3166-1` = Country.`ISO3166-1`
INNER JOIN Pecularities_Countries ON Pecularities_Countries.`Country_ISO3166-1` = Country.`ISO3166-1`
INNER JOIN Route ON Route.To_idCity = City.idCity
INNER JOIN Entry ON Entry.Route_idRoute = Route.idRoute
INNER JOIN User ON User.idUser = Entry.User_idUser
GROUP BY idPeculiarity, idUser
ORDER BY idUser, TotalPreference DESC;
USE `tourism_db`;

DELIMITER $$
USE `tourism_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `tourism_db`.`Route_BEFORE_INSERT` BEFORE INSERT ON `Route` FOR EACH ROW
BEGIN
	IF (YEAR(NEW.Departure) < 2023 OR YEAR(NEW.Arrival) < 2023) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Only routes from 2023 or later is accepted';
    END IF;
    
    IF (NEW.Departure > NEW.Arrival) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Arrival should be later than departure';
    END IF;
END$$

USE `tourism_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `tourism_db`.`Route_BEFORE_UPDATE` BEFORE UPDATE ON `Route` FOR EACH ROW
BEGIN
	IF (YEAR(NEW.Departure) < 2023 OR YEAR(NEW.Arrival) < 2023) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Only routes from 2023 or later is accepted';
    END IF;
    
    IF (NEW.Departure > NEW.Arrival) THEN
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Arrival should be later than departure';
    END IF;
END$$

USE `tourism_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `tourism_db`.`User_BEFORE_INSERT` BEFORE INSERT ON `User` FOR EACH ROW
BEGIN
	IF (TIMESTAMPDIFF(YEAR, NEW.Birth, CURDATE()) < 18) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Age must be at least 18';
    END IF;
END$$

USE `tourism_db`$$
CREATE DEFINER = CURRENT_USER TRIGGER `tourism_db`.`User_BEFORE_UPDATE` BEFORE UPDATE ON `User` FOR EACH ROW
BEGIN
	IF (TIMESTAMPDIFF(YEAR, NEW.Birth, CURDATE()) < 18) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Age must be at least 18';
    END IF;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
